import pytube
import tqdm
import os
import re
import concurrent.futures
from pytube.exceptions import PytubeError
import time

def sanitize_filename(filename):
    """Sanitizes the filename by removing or replacing invalid characters.

    Args:
        filename: The original filename.

    Returns:
        The sanitized filename.
    """
    pattern = r'[<>:"/\\|?*]'
    sanitized_filename = re.sub(pattern, '_', filename)
    return sanitized_filename

def download_video(video, output_path, retries=3):
    """Downloads a single YouTube video to the specified path.

    Args:
        video: The YouTube video object.
        output_path: The directory where the video will be saved.
        retries: Number of retry attempts for failed downloads.
    """
    video_title = sanitize_filename(video.title)
    file_path = os.path.join(output_path, f"{video_title}.mp4")
    if os.path.exists(file_path):
        print(f"Skipping {video_title}, already downloaded.")
        return

    attempt = 0
    while attempt < retries:
        try:
            video.streams.get_highest_resolution().download(output_path=output_path, filename=f"{video_title}.mp4")
            return
        except PytubeError as e:
            print(f"Error downloading {video_title}: {e}. Retrying ({attempt + 1}/{retries})...")
            attempt += 1
            time.sleep(2)  # Wait a bit before retrying

    print(f"Failed to download {video_title} after {retries} attempts.")

def download_youtube_video(video_url, output_path):
    """Downloads a single YouTube video to the specified folder.

    Args:
        video_url: The URL of the YouTube video to download.
        output_path: The directory where the video will be saved.
    """
    video = pytube.YouTube(video_url)
    download_video(video, output_path)

def download_youtube_playlist(playlist_url, output_path):
    """Downloads a YouTube playlist to the specified folder.

    Args:
        playlist_url: The URL of the YouTube playlist to download.
        output_path: The directory where the videos will be saved.
    """
    playlist = pytube.Playlist(playlist_url)
    
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = [executor.submit(download_video, video, output_path) for video in playlist.videos]
        for _ in tqdm.tqdm(concurrent.futures.as_completed(futures), total=len(futures)):
            pass

if __name__ == "__main__":
    output_folder = '200pluspython'
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    choice = input("Enter '1' to download a single video, '2' to download a playlist: ")

    if choice == '1':
        video_url = input("Enter the YouTube video URL: ")
        download_youtube_video(video_url, output_folder)
    elif choice == '2':
        playlist_url = input("Enter the YouTube playlist URL: ")
        download_youtube_playlist(playlist_url, output_folder)
    else:
        print("Invalid choice. Please enter '1' or '2'.")
